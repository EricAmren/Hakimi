
# This file was *autogenerated* from the file new.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4)
class Node:
    def __init__(self, degreeSequence = []):
        self.parent = Node
        self.children = []
        self.degreeSequence = degreeSequence
        self.leaves = []
        self.graph = None

    def add_children(self, list_of_children):
        for child in list_of_children:
            self.add_child(child)


    def add_child(self, child):
        if child not in self.children:
            self.children.append(child)
            child.parent = self
            self.degreeSequence.extend(child.degreeSequence)

    def set_vertex(self):
        if self.children == []:
            graph = Graph(_sage_const_1 , loops=False, multiedges=True)
            self.graph = graph2hash(graph)
        else:
            raise ValueError("This node is not an atom.")

    def get_graph(self):
        if self.graph != Node:
            return hash2graph(self.graph)
        else:
            raise ValueError("No graph")


    # def update_graph(self):
        # if self.

def build_atom(letter):
    letter = letter.upper()
    degree = None
    if letter == 'H':
        degree = _sage_const_1 
    elif letter == 'O':
        degree = _sage_const_2 
    elif letter == 'N':
        degree = _sage_const_3 
    elif letter == 'C':
        degree = _sage_const_4 
    if degree == None:
        raise ValueError("Character not implemented.")
    atom = Node([degree])
    atom.set_vertex()
    return atom




def graph2hash(graph):
    hash = graph.canonical_label().sparse6_string()
    return hash

def hash2graph(hash):
    graph = Graph(hash, loops=False, multiedges=True, data_structure="sparse")
    return graph

n = Node()
n1 = Node([_sage_const_1 ])
n2 = Node([_sage_const_2 ])
n.add_children([n1,n2])
n1.set_vertex()
n3 = build_atom("N")
print(n3.degreeSequence)



