
# This file was *autogenerated* from the file spectro2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
def TODO():
    raise NotImplementedError("To be implemented")



class Node:
    def __init__(self, atoms = []):
        self.parent = None
        self.children = []
        self.atoms = atoms

    def add_children(self, children):
        for child in children:
            if child not in self.children:
                self.children.append(child)
                child.parent = self

class Atom:
    def __init__(self):
        self.vertex = None
        self.valence = None
        self.degree = _sage_const_0 

def build_atom(valence):
    atom = Atom()
    atom.valence = valence
    return atom

C1 = build_atom(_sage_const_4 )
C2 = build_atom(_sage_const_4 )
C3 = build_atom(_sage_const_4 )
N1 = build_atom(_sage_const_3 )
N2 = build_atom(_sage_const_3 )
O1 = build_atom(_sage_const_2 )
O2 = build_atom(_sage_const_2 )
H1 = build_atom(_sage_const_1 )
H2 = build_atom(_sage_const_1 )

n1 = Node([C1,H1])
n2 = Node([N1,O1])
n3 = Node([C2,O2])
n4 = Node([C3,N2,H2])
n5 = Node(n1.atoms + n2.atoms)
n5.add_children([n1,n2])
n6 = Node(n3.atoms + n4.atoms)
n6.add_children([n3,n4])
root = Node(n5.atoms + n6.atoms)
root.add_children([n5,n6])
print(root.children)



